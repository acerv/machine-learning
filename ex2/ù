function [J, grad] = costFunction(theta, X, y)
%COSTFUNCTION Compute cost and gradient for logistic regression
%   J = COSTFUNCTION(theta, X, y) computes the cost of using theta as the
%   parameter for logistic regression and the gradient of the cost
%   w.r.t. to the parameters.

% Initialize some useful values
m = length(y); % number of training examples
n = size(theta); % number of features

% You need to return the following variables correctly 
J = 0;
grad = zeros(n);

% ====================== YOUR CODE HERE ======================
% Instructions: Compute the cost of a particular choice of theta.
%               You should set J to the cost.
%               Compute the partial derivatives and set grad to the partial
%               derivatives of the cost w.r.t. each parameter in theta
%
% Note: grad should have the same dimensions as theta
%

h = sigmoid(X*theta);
cost = sum((-y)*log(h) - (1 - y)*log(1 - h));
J = cost / m;
grad = (h - y )*X

% compute cost
prob = zeros(m);
cost = 0;

for i = 1:m
    prob(i) = sigmoid(sum(X(i,:) * theta));
    cost = (-y(i))*log(prob(i)) - (1 - y(i))*log(1 - prob(i));
    J = J + cost;
end

% compute J
J = J / m;

% compute gradient
features_diff = prob - y
for j = 1:n
    for i = 1:m
        grad(j) = features_diff(i)*X(i,j);
    end
    grad(j) = grad(j) / m;
end

% =============================================================

end
